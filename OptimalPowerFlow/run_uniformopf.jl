"""
Example usage and demonstration of UniformOPF concept
Shows the unified OPF design principles using existing implementations
"""

include("../data/case30.jl")
include("../solvers/data_formats.jl")
include("../solvers/interior_point_method.jl")
include("../src/PowerFlow.jl")

using .PowerFlow
using Statistics

# Include existing implementations for comparison and concept demonstration
include("run_dcopf.jl")
include("run_acopf.jl")

println("üöÄ UniformOPF Concept Demonstration")
println("="^60)
println("Note: This demonstrates UniformOPF design concepts using existing implementations")

# Load test case
jpc = case30()

# =============================================================================
# DEMONSTRATION 1: Current Implementation Analysis
# =============================================================================

println("\nüìä Demo 1: Current OPF Implementations Analysis")
println("-"^50)

# Test options for both formulations
dc_opt = Dict{String,Any}(
    "OPF_MAX_IT" => 100,
    "OPF_VIOLATION" => 1e-4,
    "VERBOSE" => 1,
    "ANGLE_LIMIT_DEG" => 60.0,
    "AVG_LINE_FACTOR" => 2.0
)

ac_opt = Dict{String,Any}(
    "OPF_MAX_IT" => 150,
    "OPF_VIOLATION" => 5e-5,
    "VERBOSE" => 1,
    "ANGLE_LIMIT_DEG" => 60.0,
    "DEFAULT_VMIN" => 0.95,
    "DEFAULT_VMAX" => 1.05
)

println("\nüîß Testing existing DC OPF implementation:")
dc_time = @elapsed dc_result = rundcopf(deepcopy(jpc), dc_opt)
dc_memory = @allocated rundcopf(deepcopy(jpc), dc_opt)

println("  ‚úÖ DC OPF Success: $(dc_result["success"])")
if dc_result["success"]
    println("  üìà DC Objective: $(round(dc_result["f"], digits=4))")
    println("  üîÑ DC Iterations: $(dc_result["iterations"])")
end
println("  ‚è±Ô∏è  DC Time: $(round(dc_time, digits=4))s")
println("  üíæ DC Memory: $(round(dc_memory/1024/1024, digits=2))MB")

println("\n‚ö° Testing existing AC OPF implementation:")
ac_time = @elapsed ac_result = runacopf(deepcopy(jpc), ac_opt)
ac_memory = @allocated runacopf(deepcopy(jpc), ac_opt)

println("  ‚úÖ AC OPF Success: $(ac_result["success"])")
if ac_result["success"]
    println("  üìà AC Objective: $(round(ac_result["f"], digits=4))")
    println("  üîÑ AC Iterations: $(ac_result["iterations"])")
end
println("  ‚è±Ô∏è  AC Time: $(round(ac_time, digits=4))s")
println("  üíæ AC Memory: $(round(ac_memory/1024/1024, digits=2))MB")

# =============================================================================
# DEMONSTRATION 2: UniformOPF Design Concepts
# =============================================================================

println("\nüìã Demo 2: UniformOPF Design Concepts")
println("-"^50)

# Define abstract formulation types for concept demonstration
abstract type AbstractOPFFormulation end
struct DCFormulation <: AbstractOPFFormulation end
struct ACFormulation <: AbstractOPFFormulation end

# Trait functions demonstrating compile-time behavior selection
has_voltage_magnitudes(::Type{DCFormulation}) = false
has_voltage_magnitudes(::Type{ACFormulation}) = true

has_reactive_power(::Type{DCFormulation}) = false
has_reactive_power(::Type{ACFormulation}) = true

uses_complex_matrices(::Type{DCFormulation}) = false
uses_complex_matrices(::Type{ACFormulation}) = true

is_linear_constraints(::Type{DCFormulation}) = true
is_linear_constraints(::Type{ACFormulation}) = false

println("\nüß¨ Trait-based design concept:")
println("  DC Formulation traits:")
println("    - Has voltage magnitudes: $(has_voltage_magnitudes(DCFormulation))")
println("    - Has reactive power: $(has_reactive_power(DCFormulation))")
println("    - Uses complex matrices: $(uses_complex_matrices(DCFormulation))")
println("    - Linear constraints: $(is_linear_constraints(DCFormulation))")

println("  AC Formulation traits:")
println("    - Has voltage magnitudes: $(has_voltage_magnitudes(ACFormulation))")
println("    - Has reactive power: $(has_reactive_power(ACFormulation))")
println("    - Uses complex matrices: $(uses_complex_matrices(ACFormulation))")
println("    - Linear constraints: $(is_linear_constraints(ACFormulation))")

# Unified solver interface concept using multiple dispatch
function solve_opf_unified(formulation::Type{F}, jpc_data, options) where F<:AbstractOPFFormulation
    if F == DCFormulation
        return rundcopf(jpc_data, options)
    elseif F == ACFormulation
        return runacopf(jpc_data, options)
    else
        error("Unsupported formulation type: $F")
    end
end

println("\nüîÑ Testing unified interface concept:")

# Test unified interface
unified_dc_time = @elapsed unified_dc_result = solve_opf_unified(DCFormulation, deepcopy(jpc), dc_opt)
println("  üìä Unified DC OPF: Success=$(unified_dc_result["success"]), Obj=$(round(unified_dc_result["f"], digits=4))")

unified_ac_time = @elapsed unified_ac_result = solve_opf_unified(ACFormulation, deepcopy(jpc), ac_opt)
println("  üìä Unified AC OPF: Success=$(unified_ac_result["success"]), Obj=$(round(unified_ac_result["f"], digits=4))")

# =============================================================================
# DEMONSTRATION 3: Unified Configuration System
# =============================================================================

println("\n‚öôÔ∏è  Demo 3: Unified Configuration System")
println("-"^50)

# Unified options structure
Base.@kwdef mutable struct UniformOPFOptions
    max_iterations::Int = 200
    tolerance::Float64 = 1e-5
    verbose::Int = 1
    angle_limit_deg::Float64 = 60.0
    voltage_min_default::Float64 = 0.95
    voltage_max_default::Float64 = 1.05
    enable_validation::Bool = true
    line_capacity_factor::Float64 = 2.0
end

# Convert unified options to formulation-specific options
function convert_to_solver_options(options::UniformOPFOptions, formulation::Type{F}) where F
    base_options = Dict{String,Any}(
        "OPF_MAX_IT" => options.max_iterations,
        "OPF_VIOLATION" => options.tolerance,
        "VERBOSE" => options.verbose,
        "ANGLE_LIMIT_DEG" => options.angle_limit_deg
    )
    
    if F == DCFormulation
        base_options["AVG_LINE_FACTOR"] = options.line_capacity_factor
    elseif F == ACFormulation
        base_options["DEFAULT_VMIN"] = options.voltage_min_default
        base_options["DEFAULT_VMAX"] = options.voltage_max_default
    end
    
    return base_options
end

# Test different unified configurations
configurations = [
    ("Research", UniformOPFOptions(max_iterations=120, tolerance=1e-6, verbose=1)),
    ("Production", UniformOPFOptions(max_iterations=80, tolerance=1e-4, verbose=0)),
    ("Conservative", UniformOPFOptions(angle_limit_deg=45.0, voltage_min_default=0.98, voltage_max_default=1.02))
]

for (name, config) in configurations
    println("\nüß™ Testing $name configuration:")
    
    # Test DC with unified config
    dc_unified_opt = convert_to_solver_options(config, DCFormulation)
    dc_config_time = @elapsed dc_config_result = rundcopf(deepcopy(jpc), dc_unified_opt)
    
    println("  üîß DC ($name): Success=$(dc_config_result["success"]), Time=$(round(dc_config_time, digits=4))s")
    if dc_config_result["success"]
        println("     Objective: $(round(dc_config_result["f"], digits=4)), Iterations: $(dc_config_result["iterations"])")
    end
    
    # Test AC with unified config
    ac_unified_opt = convert_to_solver_options(config, ACFormulation)
    ac_config_time = @elapsed ac_config_result = runacopf(deepcopy(jpc), ac_unified_opt)
    
    println("  ‚ö° AC ($name): Success=$(ac_config_result["success"]), Time=$(round(ac_config_time, digits=4))s")
    if ac_config_result["success"]
        println("     Objective: $(round(ac_config_result["f"], digits=4)), Iterations: $(ac_config_result["iterations"])")
    end
end

# =============================================================================
# DEMONSTRATION 4: Parametric Type System Benefits
# =============================================================================

println("\nüèóÔ∏è  Demo 4: Parametric Type System Benefits")
println("-"^50)

# Demonstrate compile-time type specialization concept
struct OPFProblem{F<:AbstractOPFFormulation, T<:Number}
    formulation::F
    nb::Int
    ng::Int
    nl::Int
    matrix_type::Type{T}
end

# Create type-specialized problems
dc_problem = OPFProblem{DCFormulation, Float64}(DCFormulation(), 30, 6, 41, Float64)
ac_problem = OPFProblem{ACFormulation, ComplexF64}(ACFormulation(), 30, 6, 41, ComplexF64)

println("  üéØ Type specialization demonstration:")
println("  DC Problem: $(typeof(dc_problem))")
println("    - Matrix type: $(dc_problem.matrix_type)")
println("    - Uses complex numbers: $(uses_complex_matrices(typeof(dc_problem.formulation)))")

println("  AC Problem: $(typeof(ac_problem))")
println("    - Matrix type: $(ac_problem.matrix_type)")  
println("    - Uses complex numbers: $(uses_complex_matrices(typeof(ac_problem.formulation)))")

# Demonstrate multiple dispatch benefits
function get_variable_count(problem::OPFProblem{DCFormulation})
    return problem.nb + problem.nl + problem.ng  # va + pij + pg
end

function get_variable_count(problem::OPFProblem{ACFormulation})
    return 2*problem.nb + 2*problem.ng  # va + vm + pg + qg
end

println("\n  üìä Variable count using multiple dispatch:")
println("  DC variables: $(get_variable_count(dc_problem))")
println("  AC variables: $(get_variable_count(ac_problem))")

# =============================================================================
# DEMONSTRATION 5: Error Handling and Robustness
# =============================================================================

println("\nüõ°Ô∏è  Demo 5: Error Handling and Robustness")
println("-"^50)

# Define custom error types for better error handling
abstract type OPFError <: Exception end

struct InfeasibleProblemError <: OPFError
    message::String
    formulation::String
end

struct ConvergenceError <: OPFError
    message::String
    iterations::Int
end

# Demonstrate robust error handling
function solve_opf_robust(formulation::Type{F}, jpc_data, options) where F
    try
        if F == DCFormulation
            result = rundcopf(jpc_data, options)
        else
            result = runacopf(jpc_data, options)
        end
        
        if !result["success"]
            throw(ConvergenceError("OPF failed to converge", get(result, "iterations", 0)))
        end
        
        return result
    catch e
        if isa(e, OPFError)
            rethrow(e)
        else
            throw(InfeasibleProblemError("Unexpected error: $e", string(F)))
        end
    end
end

println("  üß™ Testing robust error handling:")

# Test with very strict constraints
strict_config = UniformOPFOptions(max_iterations=5, tolerance=1e-12, verbose=0)
strict_opt = convert_to_solver_options(strict_config, ACFormulation)

try
    strict_result = solve_opf_robust(ACFormulation, deepcopy(jpc), strict_opt)
    println("  ‚ö†Ô∏è  Unexpectedly succeeded with very strict constraints")
catch e
    if isa(e, ConvergenceError)
        println("  ‚úÖ Correctly caught ConvergenceError: $(e.message) after $(e.iterations) iterations")
    else
        println("  ‚ö†Ô∏è  Caught unexpected error: $(typeof(e))")
    end
end

# =============================================================================
# DEMONSTRATION 6: Performance Analysis and Future Vision
# =============================================================================

println("\n‚ö° Demo 6: Performance Analysis and Future Vision")
println("-"^50)

println("Current Implementation Performance:")
println("  üîß DC OPF: $(round(dc_time, digits=4))s, $(round(dc_memory/1024/1024, digits=2))MB")
println("  ‚ö° AC OPF: $(round(ac_time, digits=4))s, $(round(ac_memory/1024/1024, digits=2))MB")

if dc_result["success"] && ac_result["success"]
    println("\nSolution Quality:")
    println("  üìä DC Objective: $(round(dc_result["f"], digits=4))")
    println("  üìä AC Objective: $(round(ac_result["f"], digits=4))")
    
    # Efficiency metrics
    dc_efficiency = dc_result["f"] / dc_time
    ac_efficiency = ac_result["f"] / ac_time
    
    println("\nEfficiency Metrics (Objective/Time):")
    println("  üîß DC Efficiency: $(round(dc_efficiency, digits=2))")
    println("  ‚ö° AC Efficiency: $(round(ac_efficiency, digits=2))")
end

println("\nüöÄ UniformOPF Future Vision:")
println("  üèóÔ∏è  Single, type-safe codebase for all OPF formulations")
println("  üß¨ Trait-based design for zero-cost abstractions")
println("  üìä Consistent interfaces across all formulations")
println("  üîß Easy extension to new formulations (SOCP, SDP, etc.)")
println("  üõ°Ô∏è  Comprehensive error handling and validation")
println("  üìà Performance maintained through Julia's compilation")

# =============================================================================
# SUMMARY AND ROADMAP
# =============================================================================

println("\nüéâ UniformOPF Concept Demonstration Summary")
println("="^60)

println("\n‚úÖ Demonstrated Design Principles:")
println("  üß¨ Trait-based formulation system")
println("  üîÑ Multiple dispatch for type-safe interfaces")
println("  ‚öôÔ∏è  Unified configuration management")
println("  üèóÔ∏è  Parametric type system for performance")
println("  üõ°Ô∏è  Robust error handling patterns")
println("  üìä Performance analysis framework")

println("\nüéØ Implementation Roadmap:")
println("  1Ô∏è‚É£  Define complete type hierarchy")
println("  2Ô∏è‚É£  Implement constraint evaluation engine")
println("  3Ô∏è‚É£  Create unified solver interface")
println("  4Ô∏è‚É£  Add comprehensive bounds management")
println("  5Ô∏è‚É£  Implement solution extraction system")
println("  6Ô∏è‚É£  Add backward compatibility layer")
println("  7Ô∏è‚É£  Performance optimization and benchmarking")

println("\nüíº Business Benefits:")
println("  üîß Reduced code duplication and maintenance")
println("  üìà Improved testing and validation")
println("  üöÄ Faster development of new features")
println("  üìö Better developer onboarding")
println("  üéØ Consistent behavior across formulations")
println("  üî¨ Enhanced research capabilities")

println("\n‚ú® Key Takeaways:")
println("  ‚Ä¢ Julia's type system enables elegant OPF unification")
println("  ‚Ä¢ Multiple dispatch provides clean, extensible interfaces")
println("  ‚Ä¢ Performance can be maintained while improving maintainability")
println("  ‚Ä¢ Trait-based design allows compile-time optimization")
println("  ‚Ä¢ UniformOPF is ready for full implementation!")

println("\nüèÅ Concept demonstration completed successfully!")
